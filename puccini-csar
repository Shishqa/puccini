#!/bin/bash
set -e

# See:
#  https://docs.oasis-open.org/tosca/TOSCA-Simple-Profile-YAML/v1.3/cos01/TOSCA-Simple-Profile-YAML-v1.3-cos01.html#_Toc26969474
#  https://docs.oasis-open.org/tosca/TOSCA-Simple-Profile-YAML/v1.2/os/TOSCA-Simple-Profile-YAML-v1.2-os.html#_Toc528072959
#  http://docs.oasis-open.org/tosca/TOSCA-Simple-Profile-YAML/v1.1/os/TOSCA-Simple-Profile-YAML-v1.1-os.html#_Toc489606742
#  http://docs.oasis-open.org/tosca/TOSCA/v1.0/os/TOSCA-v1.0-os.html#_Toc356403713

TOOL=$(basename "$0")

TOSCA_META_FILE_VERSION=${TOSCA_META_FILE_VERSION:-1.1}
CSAR_VERSION=${CSAR_VERSION:-1.1}
CREATED_BY=${CREATED_BY:-$TOOL}

if [ "$#" -lt 1 ]; then
cat << EOT
Simple TOSCA CSAR creation tool

Usage:

    $TOOL [CSAR file path] [[root directory]]

If "CSAR file path" doesn't have a ".csar" extension, it will be automatically
appended.

If "CSAR file path" already exists, the file will be deleted.

If "root directory" is not specified, the root will be current directory.

Will automatically create and add a "TOSCA-Metadata/TOSCA.meta" file to the
archive.

You can set the "ENTRY_DEFINITIONS" environment variable to specify the path
to your service template YAML file (relative to the root). Otherwise, if
there's a single YAML file in the root it will be used automatically. If
there's more than one YAML file in the root then you *must* explicitly set
"ENTRY_DEFINITIONS".

Other supported environment variables:

    TOSCA_META_FILE_VERSION
    CSAR_VERSION
    CREATED_BY
    OTHER_DEFINITIONS

EOT
	exit 1
fi

# CSAR file

CSAR=$(readlink -f "$1")

if [ "${CSAR##*.}" != csar ]; then
	CSAR=$CSAR.csar
fi

if [ -f "$CSAR" ]; then
	echo "CSAR already exists, deleting: $CSAR"
	rm --force "$CSAR"
fi

# Root directory

ROOT=$(readlink -f "${2:-.}")

if [ ! -d "$ROOT" ]; then
	echo "Failed: root not a directory: $ROOT" > /dev/stderr
	exit 1
fi

# Zip

pushd "$ROOT" > /dev/null
zip -9 --recurse-paths "$CSAR" . > /dev/null
popd > /dev/null

# Entry-Definitions

if [ -z "$ENTRY_DEFINITIONS" ]; then
	# Try to automatically set Entry-Definitions
	IFS=$'\n'
	for F in $(zipinfo -1 "$CSAR"); do
		if [ "$(dirname "$F")" == . ]; then
			EXT=${F##*.}
			if [ "$EXT" == yaml ] || [ "$EXT" == yml ]; then
				if [ -n "$ENTRY_DEFINITIONS" ]; then
					echo 'Failed: multiple YAML files in root, you must set ENTRY_DEFINITIONS environment variable to choose one' > /dev/stderr
					rm --force "$CSAR"
					exit 1
				fi
				ENTRY_DEFINITIONS=$F
			fi
		fi
	done

	if [ -z "$ENTRY_DEFINITIONS" ]; then
		echo 'Failed: no YAML files in root, you must set ENTRY_DEFINITIONS environment variable to choose one' > /dev/stderr
		rm --force "$CSAR"
		exit 1
	fi
fi

echo "Entry-Definitions: $ENTRY_DEFINITIONS"

# Metadata

TEMP_ROOT=$(mktemp --directory)

function the_end () {
	local ERR=$?
	rm --recursive "$TEMP_ROOT"
	if [ "$ERR" == 0 ]; then
		echo "CSAR created: $CSAR"
	else
		echo "Failed" > /dev/stderr
		rm --force "$CSAR"
		exit $ERR
	fi
}

trap the_end EXIT

cd "$TEMP_ROOT"
mkdir TOSCA-Metadata

cat << EOT >> TOSCA-Metadata/TOSCA.meta
TOSCA-Meta-File-Version: $TOSCA_META_FILE_VERSION
CSAR-Version: $CSAR_VERSION
Created-By: $CREATED_BY
Entry-Definitions: $ENTRY_DEFINITIONS
Other-Definitions: $OTHER_DEFINITIONS
EOT

zip -9 --recurse-paths "$CSAR" . > /dev/null
